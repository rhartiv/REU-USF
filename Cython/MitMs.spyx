## NEW parallel MitM using dictionaries instead of lists

from time import time
import itertools
from sage.all import *

## Here are Listed Common Gates as Lists With Their Names as a String and Their Unitaries as a Matrix
H=['H',(1/sqrt(2))*matrix([[1,1],[1,-1]])]
X=['X',matrix([[0,1],[1,0]])]
Y=['Y',matrix([[0,-I],[I,0]])]
Z=['Z',matrix([[1,0],[0,-1]])]
S=['S',matrix([[1,0],[0,I]])]
T=['T',matrix([[1,0],[0,(1/2*I + 1/2)*sqrt(2)]])]
Toffoli=['Toffoli',matrix([[1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0]])]
Id=['Id',matrix.identity(2)]
GateTypes=sorted([H,S])
X0=['X0',Id[1].tensor_product(X[1])]
X0[1].set_immutable()

## This Function Creates the CNOT Gate Unitary for Target i and Control j on n Qubits
def CNOT(i,j,n):
	i=n-i-1
	j=n-j-1
	XX=matrix([1])
	Y=matrix([1])
	zero=vector([1,0])
	one=vector([0,1])
	for ii in range(n):
		if ii==i:
			x=zero.outer_product(zero)
			y=one.outer_product(one)
		elif ii==j:
			x=Id[1]
			y=X[1]
		else:
			x=Id[1]
			y=Id[1]
		XX=XX.tensor_product(x)
		Y=Y.tensor_product(y)
	U=XX+Y
	return(U)

## This Function Will Take Any Gate Type and Place it on The Specified Wire Position, Returning the Unitary
def Gate(pos,n,GateType):
	ID=[matrix([1])]
	for i in range(n):
		ID.append(i)
		ID[i+1]=ID[i].tensor_product(Id[1])
	OutGate=ID[n-(pos+1)].tensor_product(GateType[1]).tensor_product(ID[pos])
	return(OutGate)

## This Function Will Create a List of Single-Quantum-Gates (i.e. Depth-1 Circuits up to Gate-Count n)
def BuildG(n):
	L=[]
	L2=[]
	# Cartesian Product of the Gate Types
	for i in range(n):
		L.append([])
		for ii in GateTypes:
			L[i].append(ii[0])
		for ii in itertools.product(*L):
			if sorted(ii) not in L2:
				L2.append(list(ii))
	L3=[]
	# Joining the Unique Sets of Cartesian Products
	for i in range(len(L2)):
		NumOfGates=len(L2[i])
		SQG=matrix.identity(2**n)
		for ii in range(NumOfGates):
			pos=ii
			for iii in range(len(GateTypes)):
				if L2[i][ii] in GateTypes[iii]:
					G=Gate(pos,n,GateTypes[iii])
			SQG=SQG*G
		L3.append([''.join(L2[i]),SQG])
	
	G=[[],[]]
	# Adding CNOT Gates
	for i in range(n):
		for j in range(n):
			if j!=i:
				G[0].append('CNOT({} {})'.format(i,j))
				G[1].append(CNOT(i,j,n))
	for i in range(len(G[0])):
		L3.append([G[0][i],G[1][i]])
	L3.append(['Id',Gate(0,n,Id)])
	return(sorted(L3))	

## This Function Creates a Dictionary From a Given List (say of BuildG)
def CircuitList(G):
	d={}
	for i in G:
		i[1].set_immutable()
		d[i[1]]=i[0]
	return(d)

def SWAP(i,j,n):
	U=CNOT(i,j,n)*CNOT(j,i,n)*CNOT(i,j,n)
	return(U)

def PermMatrices(n):
	IdElem=matrix.identity(2**n)
	FinalList=[]
	cycles=[]
	swaps=[]
	ProductList=[]
	
	Perms=list(Permutations(n))
	for i in range(len(Perms)):
		cycles.append(Perms[i].cycle_tuples())
	for i in range(len(cycles)):
		swaps.append([])
		for ii in range(len(cycles[i])):
			if len(cycles[i][ii])==2:
				swaps[i].append(cycles[i][ii])
			elif len(cycles[i][ii])>2:
				for iii in range(len(cycles[i][ii])-1):
					swaps[i].append((cycles[i][ii][iii],cycles[i][ii][iii+1]))
	
	for i in range(len(swaps)):
		FinalList.append(IdElem)
		for ii in range(len(swaps[i])):
			FinalList[i]=SWAP(swaps[i][ii][0]-1,swaps[i][ii][1]-1,n)*FinalList[i]
	
	return(FinalList)
	
def TupleG(G,A,CopyCircuits,Target):
	TupleList=[]
	for i in G:
		Tuple=tuple([i,A,CopyCircuits,Target])
		TupleList.append(Tuple)
		
	return TupleList
		
def FindOnes(Target,a):
	## Here a is the number of ancillae 
	Ones=[]
	n=len(list(Target))/(2^a)
	for i in range(n):
		for ii in range(n):
			if abs(Target[i][ii])==1:
				Ones.append([i,ii])
	return Ones

def TME(A,l):
	## Here A is an input unitary, and l is a list of indices 
	test=true
	for i in range(len(l)):
		if abs(A[l[i][0]][l[i][1]])!=1:
			test=false
			break
	if A==matrix.identity(len(list(A))):
		test=false
	return test
	
def SplitToTwos(lst):
	out=[]
	for i in range(0,len(lst),2):
		out.append(lst[i:i+2])
	return out

@parallel(4)
def Combine(lst):
	lst2=lst[0]
	lst2.update(lst[1])
	return lst2

## ExpandBySQG
@parallel(8)
def ExpandBySQG(SQG,dict,copydict,Target):
	P=PermMatrices(round(log(len(Target[0]))/log(2)))
	for i in copydict:
		AB=SQG[1]*i
		AB.set_immutable()
		flag=0
		for ii in P:
			if AB*ii==Target:
				flag=1
				break
		
		if AB not in dict:
			dict[AB]=SQG[0]+','+copydict[i]
		if flag==1:
			break
	return(dict)

def MitM(Target,a,depth):
	P=PermMatrices(round(log(len(Target[0]))/log(2)))
	G=BuildG(round(log(len(Target[0]))/log(2)))
	Circuits=CircuitList(G)
	l=FindOnes(Target,a)
	TargetCircuits=[]
	comlen=0
	while comlen<(depth-1):
		CopyCircuits=deepcopy(Circuits)
		Tuples=TupleG(G,Circuits,CopyCircuits,Target)
		UpdaterList=[]
		for Input,Output in sorted(list(ExpandBySQG(Tuples))): UpdaterList.append(Output)
		while len(UpdaterList)>1:
			SplitList=SplitToTwos(UpdaterList)
			UpdaterList=[]
			for In,Out in Combine(SplitList): UpdaterList.append(Out)
		Circuits.update(UpdaterList[0])
		for i in range(len(P)):
			for ii in Circuits:
				Pii=P[i]*ii*P[i]
				Pii.set_immutable()
				if TME(Pii,l)==true:
					if Circuits[Pii] not in TargetCircuits:
						TargetCircuits.append(Circuits[Pii])
				else:
					continue
		comlen += 1
	print(TargetCircuits)
	return TargetCircuits
